/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import model.DB;
import model.Item;
import model.User;

/**
 *
 * @author bendrhick
 */
public class InventoryOverview extends javax.swing.JFrame {

    /**
     * Creates new form InventoryOverview
     */
    private static User sessionUser = null;
    private static String action = null;
    private static int itemCount = 0;
    DB db = new DB();
    private static DefaultTableModel FillTable() throws ClassNotFoundException, SQLException {
        DefaultTableModel model = new DefaultTableModel();
        
        List<Item> items = new ArrayList<Item>();
        DB db = new DB();
        items = db.getItems();
        
        model.addColumn("Item No");
        model.addColumn("Product Name");
        model.addColumn("Information");
        model.addColumn("IP Rate");
        model.addColumn("Kelvin");
        model.addColumn("Beam Angle");
        model.addColumn("Wattage");
        model.addColumn("Color Temp");
        model.addColumn("Batch No");
        model.addColumn("Row No");
        model.addColumn("Rack No");
        model.addColumn("Location No");
        model.addColumn("Threshold");
        model.addColumn("Production Date");
        model.addColumn("Lumens");
        model.addColumn("Cri");
        model.addColumn("Power");
        model.addColumn("Size");
        model.addColumn("AC");
        model.addColumn("DC");
        model.addColumn("Remarks");
        
        itemCount = items.size();
        
        for(int i = 0; i < items.size(); i++){
            Object [] rowData = {
                items.get(i).getItemNo(),
                items.get(i).getProductName(),
                items.get(i).getInformation(),
                items.get(i).getIpRate(),
                items.get(i).getKelvin(),
                items.get(i).getBeamAngle(),
                items.get(i).getWattage(),
                items.get(i).getColorTemp(),
                items.get(i).getBatchNo(),
                items.get(i).getRowNo(),
                items.get(i).getRackNo(),
                items.get(i).getLocationNo(),
                items.get(i).getThreshold(),
                items.get(i).getProductionDate(),
                items.get(i).getLumens(),
                items.get(i).getCri(),
                items.get(i).getPower(),
                items.get(i).getSize(),
                items.get(i).getAc(),
                items.get(i).getDc(),
                items.get(i).getRemarks()
            };
            model.addRow(rowData);
        }
       
        return model;
    }
    
    public InventoryOverview(User user, String action) throws ClassNotFoundException, SQLException {
        initComponents();
        this.sessionUser = user;
        this.action = action;
        DefaultTableModel model = InventoryOverview.FillTable();
        
        tableInventory.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableInventory = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Menu");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Search:");

        jTextField1.setText("jTextField1");

        tableInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {

            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Float.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableInventory.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableInventory.setGridColor(new java.awt.Color(0, 102, 102));
        tableInventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInventoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableInventory);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1090, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableInventoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInventoryMouseClicked
        // TODO add your handling code here:
        int row = tableInventory.rowAtPoint(evt.getPoint());
        int itemID = Integer.parseInt((String) tableInventory.getValueAt(row, 0));
        this.setVisible(false);
        if(this.action == "Edit"){
            try {
                EditItem editItem = new EditItem(this.sessionUser, "Edit");
                editItem.setEditableFields(itemID);
                editItem.setTitle("DSL Inventory System | Edit Item");
                editItem.pack();
                editItem.setLocationRelativeTo(null);
                editItem.setVisible(true);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InventoryOverview.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InventoryOverview.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(InventoryOverview.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(this.action == "Delete"){
            try {
                EditItem editItem = new EditItem(this.sessionUser, "Delete");
                editItem.setEditableFields(itemID);
                editItem.setTitle("DSL Inventory System | Edit Item");
                editItem.pack();
                editItem.setLocationRelativeTo(null);
                editItem.setVisible(true);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InventoryOverview.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(InventoryOverview.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(InventoryOverview.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if(this.action == "Replenish"){
            Replenish replenish = new Replenish(this.sessionUser);
            replenish.setTitle("DSL Inventory System | Replenish Stock");
            replenish.pack();
            replenish.setLocationRelativeTo(null);
            replenish.setVisible(true);
        }
        else if(this.action == "Deplete"){
            Deplete deplete = new Deplete(this.sessionUser);
            deplete.setTitle("DSL Inventory System | Deplete Stock");
            deplete.pack();
            deplete.setLocationRelativeTo(null);
            deplete.setVisible(true);
        }
        else{
            EditItem editItem = new EditItem(this.sessionUser, "All");
            editItem.setTitle("DSL Inventory System | Edit Item");
            editItem.pack();
            editItem.setLocationRelativeTo(null);
            editItem.setVisible(true);
        }
    }//GEN-LAST:event_tableInventoryMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tableInventory;
    // End of variables declaration//GEN-END:variables
}
